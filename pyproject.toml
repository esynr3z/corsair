[project]
name = "corsair"
version = "2.0.0"
description = "Control and Status Register map generator for FPGA/ASIC projects"
authors = [{ name = "esynr3z", email = "esynr3z@gmail.com" }]
readme = "README.md"
keywords = [
    "CSR",
    "registers",
    "generator",
    "Verilog",
    "SystemVerilog",
    "Verilog",
    "RAL",
    "FPGA",
    "ASIC",
]
classifiers = [
    "Environment :: Console",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
]
requires-python = ">=3.10"
dependencies = [
    "jinja2>=3.1.4",
    "pydantic>=2.11.0",
    "pyyaml>=6.0.2",
    "tomli>=2.0.2 ; python_full_version < '3.11'",
    "typer>=0.13.0",
]

[project.urls]
Homepage = "https://github.com/esynr3z/corsair"
Documentation = "https://corsair.readthedocs.io"
Repository = "https://github.com/esynr3z/corsair.git"
Issues = "https://github.com/esynr3z/corsair/issues"
Changelog = "https://github.com/esynr3z/corsair/blob/master/CHANGELOG.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
corsair = "corsair.__main__:app"

[project.optional-dependencies]
hjson = ["hjson>=3.1.0"]
full = ["hjson"]

[dependency-groups]
dev = [
    "commitizen>=3.30.0",
    "poethepoet>=0.29.0",
    "pre-commit-hooks>=5.0.0",
    "pre-commit>=4.0.1",
    "pyright>=1.1.388",
    "pytest-cov>=6.0.0",
    "pytest>=8.3.3",
    "ruff>=0.7.2",
    "mkdocs-exclude>=1.0.2",
    "mkdocs-git-revision-date-localized-plugin>=1.3.0",
    "mkdocs-material[imaging]>=9.5.44",
]

[tool.ruff]
line-length = 120
exclude = [
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
]
include = ["*.py", "**/*.py"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D203", # incompatible with D211
    "D213", # incompatible with D212
    # Offical guide recommends disable these to avoid conflicts with formatter
    "W191",   # tab-indentation
    "E111",   # indentation-with-invalid-multiple
    "E114",   # indentation-with-invalid-multiple-comment
    "E117",   # over-indented
    "D206",   # indent-with-spaces
    "D300",   # triple-single-quotes
    "Q000",   # bad-quotes-inline-string
    "Q001",   # bad-quotes-multiline-string
    "Q002",   # bad-quotes-docstring
    "Q003",   # avoidable-escaped-quote
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
    "ISC002", # multi-line-implicit-string-concatenation
    "TD001",  # invalid-todo-tag
    "TD002",  # missing-todo-author
    "TD003",  # missing-todo-link
    "FIX",    # flake8-fixme
    "EM101",  # raw-string-in-exception
    "EM102",  # f-string-in-exception
    "FBT",    # flake8-boolean-trap
    "TRY003", # raise-vanilla-args
    "TRY400", # error-instead-of-exception
    "E741",   # ambiguous-variable-name
    "ANN401", # any-type
    "S607",   # start-process-with-partial-path
    "S603",   # subprocess-without-shell-equals-true
]

[tool.ruff.lint.per-file-ignores]
# Ignore all directories named `tests`.
"tests/**" = [
    "S101",    # assert
    "PLR2004", # magic-value-comparison
    "E712",    # true-false-comparison
    "SLF001",  # private-member-access
]

[tool.ruff.lint.flake8-type-checking]
# Prevent models from being moved into type-checking blocks
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "corsair.core.item.StrictModelItem",
    "typer",
    "typer.Typer",
    "typer.Option",
    "typer.Argument",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
docstring-code-format = true

[tool.pyright]
exclude = [
    "**/__pycache__",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
]

[tool.poe.tasks.clean]
help = "Clean project directory from temporary files and folders"
cmd = "rm -rf .cache .ruff_cache .pytest_cache **/__pycache__ dist htmlcov .coverage site"

[tool.poe.tasks.install-hooks]
help = "Install Git pre-commit hooks"
cmd = "pre-commit install --hook-type commit-msg --hook-type pre-commit"

[tool.poe.tasks.format]
help = "Format all the Python code with Ruff"
cmd = "ruff format"

[tool.poe.tasks.lint]
help = "Lint all the Python code with Ruff"
cmd = "ruff check"

[tool.poe.tasks.check-format]
help = "Check format for all the Python code with Ruff"
cmd = "ruff format --check"

[tool.poe.tasks.check-types]
help = "Do type checking for all the Python code with Pyright"
cmd = "pyright"

[tool.poe.tasks.test]
help = "Run all tests via pytest"
cmd = "pytest -v"

[tool.poe.tasks.test-cov]
help = "Run all tests via pytest with coverage collection"
cmd = "pytest -v --cov=corsair --no-cov-on-fail --cov-report term-missing --cov-report html"

[tool.poe.tasks.check-commits]
help = "Do commit message checking for the current branch"
cmd = "cz check --rev-range master..HEAD"

[tool.poe.tasks.docs]
help = "Build the documentation"
cmd = "mkdocs build"

[tool.poe.tasks.serve-docs]
help = "Run development server for the documentation development"
cmd = "mkdocs serve"
