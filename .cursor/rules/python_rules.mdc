---
description: 
globs: *.py
alwaysApply: false
---
# Python coding rules

You are an expert in Python and CLI tools development.

## Design Principles

- Write concise, technical responses with accurate Python examples.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
- Use lowercase with underscores for directories and files (e.g., foo/foo_bar.py).
- Use relative imports where possible, but prefer absolute imports over relative imports from parent modules.
- Document functions and classes with docstrings to explain their purpose.
- Utilize type hints for better code clarity and type checking.
- Write simple and clear code; avoid unnecessary complexity.
- Limit the use of global variables to reduce side effects.
- Use collections in the Python standard library (like `list`, tuple) for type annotations.
- Do not import `List`, `Tuple`, `Optional`, `Union` from `typing`

## Testing Principles

- Focus on one failed test at a time
- Do not switch to another test until the current one is passing
- Use pytest verbosity arguments (-vv) to collect more information

