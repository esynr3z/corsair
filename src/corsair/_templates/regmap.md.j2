{# MACROS #}
{#- generic range #}
{% macro range(msb, lsb) %}
    {% if msb == lsb %}
{{ msb }}
    {%- else %}
{{ msb }}:{{ lsb }}
    {%- endif %}
{%- endmacro %}

{#- value in hex format #}
{% macro literal(reset, width) %}
{{ "0x%0{w}x".format(w=width // 4) % reset }}
{%- endmacro %}

{#- TEMPLATE NAMESPACE #}
{% set tmp = namespace() %}

{#- TEMPLATE #}
# {{ cfg.title }}

Created with [Corsair](https://github.com/esynr3z/corsair) v{{ version }}.

{% if cfg.print_conventions %}
## Conventions

| Access mode | Description               |
| :---------- | :------------------------ |
| rw          | Read and Write            |
| rw1c        | Read and Write 1 to Clear |
| rw1s        | Read and Write 1 to Set   |
| ro          | Read Only                 |
| roc         | Read Only to Clear        |
| roll        | Read Only / Latch Low     |
| rolh        | Read Only / Latch High    |
| wo          | Write only                |
| wosc        | Write Only / Self Clear   |
{% endif %}

## Register map summary

Base address: {{ literal(regmap.base_address, regmap.address_width) }}

| Name                     | Address    | Description |
| :---                     | :---       | :---        |
{% for reg in regmap.registers %}
{{ "| %-24s | %-10s | %s" % ("[%s](#%s)" % (reg.name.upper(), reg.name.lower()), literal(reg.address, regmap.address_width), reg.brief) }} |
{% endfor %}
{% for reg in regmap.registers %}

## {{ reg.name.upper() }}

{{ reg.doc }}

Address offset: {{ literal(reg.address, regmap.address_width) }}

Reset value: {{ literal(reg.reset, regmap.register_width) }}

    {% if cfg.print_images %}
![{{ reg.name.lower()}}]({{ image_dir }}/{{ reg.name.lower()}}.svg)
    {% endif %}
| Name             | Bits   | Mode            | Reset      | Description |
| :---             | :---   | :---            | :---       | :---        |
    {% for bf in reg.fields_with_reserved[::-1] %}
        {% if bf.name.startswith("_reserved") %}
{{ "| %-16s | %-6s | %-15s | %-10s | %s |" % ("-", range(bf.msb, bf.lsb), "-", literal(bf.reset, bf.width), bf.description) }}
        {% else %}
{{ "| %-16s | %-6s | %-15s | %-10s | %s |" % (bf.name.upper(), range(bf.msb, bf.lsb), bf.access, literal(bf.reset, bf.width), bf.description) }}
        {% endif %}
    {% endfor %}

    {% for bf in reg.fields %}
        {% if bf.enum %}

Enumerated values for {{ reg.name.upper() }}.{{ bf.name.upper() }}.

| Name             | Value   | Description |
| :---             | :---    | :---        |
            {% for val in bf.enum %}
{{ "| %-16s | %-6s | %s |" % (val.name, literal(val.value, bf.width), val.description) }}
            {% endfor %}
        {% endif %}
    {% endfor %}
{% endfor %}