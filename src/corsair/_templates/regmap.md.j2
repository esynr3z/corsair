{# MACROS #}
{#- generic range #}
{% macro range(msb, lsb) %}
    {% if msb == lsb %}
{{ msb }}
    {%- else %}
{{ msb }}:{{ lsb }}
    {%- endif %}
{%- endmacro %}

{#- value in hex format #}
{% macro literal(reset, width) %}
{{ "0x%0{w}x".format(w=width // 4) % reset }}
{%- endmacro %}

{#- TEMPLATE NAMESPACE #}
{% set tmp = namespace() %}

{#- TEMPLATE #}
# {{ cfg.title }}

Created with [Corsair](https://github.com/esynr3z/corsair) v{{ version }}.

{% if cfg.print_conventions %}
## Conventions

| Access mode | Description |
| :--- | :--- |
| RW | Read and Write |
| RW1C | Read and Write 1 to Clear |
| RW1S | Read and Write 1 to Set |
| RO | Read Only |
| ROC | Read Only to Clear |
| ROLL | Read Only / Latch Low |
| ROLH | Read Only / Latch High |
| WO | Write only |
| WOSC | Write Only / Self Clear |
{% endif %}

## Register map summary

Base address: {{ literal(regmap.base_address, regmap.address_width) }}

| Name | Offset | Description |
| :--- | :--- | :--- |
{% for reg in regmap.registers %}
| {{ "[%s](#%s)" % (reg.name.upper(), reg.name.lower()) }} | {{ literal(reg.address, regmap.address_width) }} | {{ reg.brief }} |
{% endfor %}
{% for reg in regmap.registers %}

## {{ reg.name.upper() }} - {{ reg.brief }}
    {% if reg.description %}

{{ reg.description }}
    {% endif %}

Address offset: {{ literal(reg.address, regmap.address_width) }}

Reset value: 0x{{ reg.reset_hexstr.upper() }}

Access mode: {{ reg.access.value.upper() }}

    {% if cfg.print_images %}
![{{ reg.name.lower()}}]({{ cfg.image_dir }}/{{regmap.name.lower()}}_{{ reg.name.lower()}}.svg)

    {% endif %}
| Name | Bits | Mode | Reset | Description |
| :--- | :--- | :--- | :--- | :--- |
    {% for bf in reg.fields_with_reserved[::-1] %}
        {% if bf.name.startswith("_reserved") %}
| - | {{ range(bf.msb, bf.lsb) }} | - | {{ "X" if bf.reset == None else literal(bf.reset, bf.width) }} | {{ bf.brief }} |
        {% else %}
| {{ bf.name.upper() }} | {{ range(bf.msb, bf.lsb) }} | {{ bf.access.value.upper() }} | {{ "X" if bf.reset == None else literal(bf.reset, bf.width) }} | {{ bf.doc_as_single_line }} |
        {% endif %}
    {% endfor %}

    {% for bf in reg.fields %}
        {% if bf.enum %}

Enumerated values for {{ reg.name.upper() }}.{{ bf.name.upper() }}:

| Name | Value | Description |
| :--- | :--- | :--- |
            {% for member in bf.enum.members %}
| {{ member.name.upper() }} | {{ literal(member.value, bf.width) }} | {{ member.doc_as_single_line }} |
            {% endfor %}
        {% endif %}
    {% endfor %}
{% endfor %}